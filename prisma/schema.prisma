generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id                                     Int                     @id @default(autoincrement())
  createdAt                              DateTime                @default(now())
  updatedAt                              DateTime                @updatedAt
  email                                  String                  @unique
  username                               String                  @unique
  hash                                   String
  role                                   Role                    @default(USER)
  hashedRt                               String?

  transactions Transaction[]
  accounts    Account[]
  loans       Loan[]
  assets      Asset[]
  reminders   Reminder[]

  @@map("users")
}

model Transaction {
  transaction_id Int             @id @default(autoincrement())
  user_id        Int
  type           TransactionType
  amount         Float
  category       String
  description    String?
  date           DateTime
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  user           Users           @relation(fields: [user_id], references: [id])

  accounts       AccountTransaction[]
}

model Account {
  account_id   Int      @id @default(autoincrement())
  user_id      Int
  name         String
  balance      Float
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         Users    @relation(fields: [user_id], references: [id])

  transactions AccountTransaction[]
  loans        LoanAccount[]
}

model Loan {
  loan_id            Int      @id @default(autoincrement())
  user_id            Int
  amount             Float
  loanType           LoanType
  counterpart        String
  interest_rate      Float
  repayment_schedule String
  start_date         DateTime
  end_date           DateTime
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               Users    @relation(fields: [user_id], references: [id])

  accounts           LoanAccount[]
}

model Asset {
  asset_id      Int      @id @default(autoincrement())
  user_id       Int
  name          String
  value         Float
  purchase_date DateTime
  description   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          Users    @relation(fields: [user_id], references: [id])
}

model AccountTransaction {
  transaction_id Int
  account_id     Int
  amount         Float

  transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id])
  account        Account     @relation(fields: [account_id], references: [account_id])

  @@id([transaction_id, account_id])
}

model LoanAccount {
  loan_id     Int
  account_id  Int
  amount      Float

  loan        Loan     @relation(fields: [loan_id], references: [loan_id])
  account     Account  @relation(fields: [account_id], references: [account_id])

  @@id([loan_id, account_id])
}

model Reminder {
  reminder_id Int      @id @default(autoincrement())
  user_id     Int
  description String
  date        DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        Users    @relation(fields: [user_id], references: [id])
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum TransactionType {
  expense
  income
}

enum LoanType {
  borrow
  lend
}
